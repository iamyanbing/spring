<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 日志存放路径 -->
    <!-- <Property name="log.path" value="./logs" /> -->
    <!-- <Property name="log.path" value="\home\logs" /> -->
    <property name="LOG_DIR" value="logs" />
    <!-- 判断log.path是否是null -->
    <if condition='isNull("log.path")'>
        <then>
            <if condition='isDefined("LOG_DIR")'>
                <then>
                    <property name="log.path" value="${LOG_DIR}" />
                </then>
                <else>
                    <property name="log.path" value="logs" />
                </else>
            </if>
        </then>
    </if>

    <!-- 日志输出格式 -->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{30} - [%method,%line] - %msg%n" />
    <!-- 日志输出格式。按照不同的颜色输出 -->
    <!--
    <property name="log.pattern"
              value="%red(%date{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) %red([%thread]) %boldMagenta(%logger{50}) - [%method,%line] - %cyan(%msg%n)"/>
     -->
    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!-- 系统日志输出 -->
    <appender name="file_info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/sys-info.log</file>
        <!-- TimeBasedRollingPolicy 是基于时间滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动。
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <!-- TimeBasedRollingPolicy 支持自动文件压缩。如果 fileNamePattern 的参数以 .gz 或 .zip 结尾，则会启用此功能。（这点不重要，不用关注） -->
            <fileNamePattern>${log.path}/sys-info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--
            日志文件保留最大时间滚动周期，
            比如当 filaNamePattern 中 %d 以为 dd 结尾时，则保留30天
            比如当 filaNamePattern 中 %d 以为 mm 结尾时，则保留30分钟
            比如当 filaNamePattern 中 %d 以为 MM 结尾时，则保留30个月
            -->
            <!--
            本element需结合 cleanHistoryOnStart 一起使用。
            原因为由于logback的时间范围计算策略问题，maxHistory可能不生效。（这是老版本的bug，新版本已经优化）

            这个问题说的是，日志文件总大小没有超过totalSizeCap，但是时间超过了maxHistory
            -->
            <!-- 默认情况下，maxHistory 设置为零，即默认情况下不会删除日志 -->
            <maxHistory>30</maxHistory>
            <!--
            单个日志文件最大大小
            当日志文件超过maxFileSize指定的大小时，根据fileNamePattern 配置的%i进行日志文件滚动
            TimeBasedRollingPolicy必须配置timeBasedFileNamingAndTriggeringPolicy

            注意：配置了maxFileSize，在 fileNamePattern 中没有配置%i会报错
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 设置的单位： KB、MB 或 GB -->
                <maxFileSize>3KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留的 总的最大大小-->
            <!-- 当日志总大小到了这个值，就会删除旧的日志 -->
            <!--
            当只有一个日志文件时，totalSizeCap设置不起作用。
            什么情况下会出现只有一个日志文件？
            1：没有设置 maxFileSize。因为 TimeBasedRollingPolicy 基于时间滚动，所以maxFileSize可以不设置
            2：fileNamePattern 值为 ${log.path}/sys-info.%d{yyyy-MM-dd}.log
            3：并且只有当天的日志文件
            -->
            <!--
            totalSizeCap 属性要求同时设置 maxHistory 属性。
            只设置 totalSizeCap，没有设置 maxHistory，则当日志总大小到了这个值，不会删除旧的日志
            maxHistory 限制总是首先应用，而 totalSizeCap 限制则在其后应用
            设置的单位： KB、MB 或 GB
            默认情况下，totalSizeCap 设置为零，即没有总大小上限
            -->
            <totalSizeCap>30KB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 只往日志文件写入info级别日志 -->
            <!-- 过滤的级别 -->
            <level>INFO</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/sys-error.log</file>
        <!-- SizeAndTimeBasedRollingPolicy 是基于时间和大小的滚动策略，几乎可以涵盖所有日志滚动需求场景，也是使用最多的策略 -->
        <!-- 该策略适用于1.1.7版本及之后的版本，之前的版本继续采用 TimeBasedRollingPolicy 加 SizeAndTimeBasedFNATP 组件实现 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 基于时间和大小的滚动策，fileNamePattern 值很重要，它决定了生成文件的名称及滚动时机,以及是否压缩 -->
            <!-- 滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动。 -->
            <!-- %i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
            <!-- 后缀以".zip"或".gz"结尾，则开启日志文件压缩。（这点不重要，不用关注） -->
            <fileNamePattern>${log.path}/sys-error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--
            单个日志文件最大大小
            当日志文件超过maxFileSize指定的大小时，根据fileNamePattern 配置的%i进行日志文件滚动

            注意：配置了 maxFileSize，在 fileNamePattern 中没有配置 %i 会报错
            -->
            <!-- SizeAndTimeBasedRollingPolicy 策略下， maxFileSize 必填-->
            <!-- 设置的单位： KB、MB 或 GB -->
            <maxFileSize>10KB</maxFileSize>
            <!--
            日志文件保留最大时间滚动周期，
            比如当 filaNamePattern 中 %d 以为 dd 结尾时，则保留30天
            比如当 filaNamePattern 中 %d 以为 mm 结尾时，则保留30分钟
            比如当 filaNamePattern 中 %d 以为 MM 结尾时，则保留30个月
            -->
            <!--
            本element需结合cleanHistoryOnStart一起使用。
            原因为由于logback的时间范围计算策略问题，maxHistory可能不生效。（这是老版本的bug，新版本已经优化）

            这个问题说的是，日志文件总大小没有超过totalSizeCap，但是时间超过了maxHistory
            -->
            <!-- 默认情况下，maxHistory 设置为零，即默认情况下不会删除日志 -->
            <maxHistory>30</maxHistory>
            <!-- 日志文件保留的 总的最大大小-->
            <!-- 当日志总大小到了这个值，就会删除旧的日志 -->
            <!--
            totalSizeCap 属性要求同时设置 maxHistory 属性。
            只设置 totalSizeCap，没有设置 maxHistory，则当日志总大小到了这个值，不会删除旧的日志
            maxHistory 限制总是首先应用，而 totalSizeCap 限制则在其后应用
            设置的单位： KB、MB 或 GB
            默认情况下，totalSizeCap 设置为零，即没有总大小上限
            -->
            <totalSizeCap>100KB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 只往日志文件写入ERROR级别日志 -->
            <!-- 过滤的级别 -->
            <level>ERROR</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 用户访问日志输出  -->
    <appender name="sys-user" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/sys-user.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/sys-user.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!-- 系统模块日志级别控制。application.properties也配置了，这里会失效  -->
    <logger name="com.iamyanbing" level="info" />
    <!-- Spring日志级别控制。application.properties也配置了，这里会失效  -->
    <logger name="org.springframework" level="warn" />

    <root level="info">
        <appender-ref ref="console" />
    </root>

    <!--系统操作日志-->
    <root level="info">
        <appender-ref ref="file_info" />
        <appender-ref ref="file_error" />
    </root>

    <!--系统用户操作日志-->
    <logger name="sys-user" level="info">
        <appender-ref ref="sys-user"/>
    </logger>
</configuration>
